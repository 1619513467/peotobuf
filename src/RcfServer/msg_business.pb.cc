// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_business.proto

#include "msg_business.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace msg {
namespace business {
PROTOBUF_CONSTEXPR GetItemRule::GetItemRule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_id_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetItemRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetItemRuleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetItemRuleDefaultTypeInternal() {}
  union {
    GetItemRule _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetItemRuleDefaultTypeInternal _GetItemRule_default_instance_;
PROTOBUF_CONSTEXPR ItemRule::ItemRule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rule_data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.rule_id_)*/ 0u

  , /*decltype(_impl_.item_rule_type_)*/ 0

  , /*decltype(_impl_.value_type_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ItemRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemRuleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemRuleDefaultTypeInternal() {}
  union {
    ItemRule _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemRuleDefaultTypeInternal _ItemRule_default_instance_;
PROTOBUF_CONSTEXPR ItemRules::ItemRules(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_rule_)*/{}
  , /*decltype(_impl_.item_id_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ItemRulesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemRulesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemRulesDefaultTypeInternal() {}
  union {
    ItemRules _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemRulesDefaultTypeInternal _ItemRules_default_instance_;
PROTOBUF_CONSTEXPR ItemCheckResult::ItemCheckResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.item_id_)*/ 0u

  , /*decltype(_impl_.type_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ItemCheckResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemCheckResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemCheckResultDefaultTypeInternal() {}
  union {
    ItemCheckResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemCheckResultDefaultTypeInternal _ItemCheckResult_default_instance_;
PROTOBUF_CONSTEXPR ItemControlState::ItemControlState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/ 0

  , /*decltype(_impl_.max_report_num_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ItemControlStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemControlStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemControlStateDefaultTypeInternal() {}
  union {
    ItemControlState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemControlStateDefaultTypeInternal _ItemControlState_default_instance_;
}  // namespace business
}  // namespace msg
static ::_pb::Metadata file_level_metadata_msg_5fbusiness_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_msg_5fbusiness_2eproto[4];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_msg_5fbusiness_2eproto = nullptr;
const ::uint32_t TableStruct_msg_5fbusiness_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::msg::business::GetItemRule, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::msg::business::GetItemRule, _impl_.item_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::msg::business::ItemRule, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::msg::business::ItemRule, _impl_.rule_id_),
    PROTOBUF_FIELD_OFFSET(::msg::business::ItemRule, _impl_.rule_data_),
    PROTOBUF_FIELD_OFFSET(::msg::business::ItemRule, _impl_.item_rule_type_),
    PROTOBUF_FIELD_OFFSET(::msg::business::ItemRule, _impl_.value_type_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::msg::business::ItemRules, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::msg::business::ItemRules, _impl_.item_id_),
    PROTOBUF_FIELD_OFFSET(::msg::business::ItemRules, _impl_.item_rule_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::msg::business::ItemCheckResult, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::msg::business::ItemCheckResult, _impl_.item_id_),
    PROTOBUF_FIELD_OFFSET(::msg::business::ItemCheckResult, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::msg::business::ItemCheckResult, _impl_.result_data_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::msg::business::ItemControlState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::msg::business::ItemControlState, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::msg::business::ItemControlState, _impl_.max_report_num_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::msg::business::GetItemRule)},
        { 9, -1, -1, sizeof(::msg::business::ItemRule)},
        { 21, -1, -1, sizeof(::msg::business::ItemRules)},
        { 31, -1, -1, sizeof(::msg::business::ItemCheckResult)},
        { 42, -1, -1, sizeof(::msg::business::ItemControlState)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::msg::business::_GetItemRule_default_instance_._instance,
    &::msg::business::_ItemRule_default_instance_._instance,
    &::msg::business::_ItemRules_default_instance_._instance,
    &::msg::business::_ItemCheckResult_default_instance_._instance,
    &::msg::business::_ItemControlState_default_instance_._instance,
};
const char descriptor_table_protodef_msg_5fbusiness_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\022msg_business.proto\022\014msg.business\"\036\n\013Ge"
    "tItemRule\022\017\n\007item_id\030\001 \001(\r\"\370\001\n\010ItemRule\022"
    "\017\n\007rule_id\030\001 \001(\r\022\021\n\trule_data\030\002 \001(\014\022;\n\016i"
    "tem_rule_type\030\003 \001(\0162#.msg.business.ItemR"
    "ule.ItemRuleType\0224\n\nvalue_type\030\004 \001(\0162 .m"
    "sg.business.ItemRule.ValueType\"+\n\014ItemRu"
    "leType\022\r\n\tT_SETRULE\020\000\022\014\n\010T_EXTEND\020\001\"(\n\tV"
    "alueType\022\014\n\010T_STRING\020\000\022\r\n\tT_DECIMAL\020\001\"G\n"
    "\tItemRules\022\017\n\007item_id\030\001 \001(\r\022)\n\titem_rule"
    "\030\002 \003(\0132\026.msg.business.ItemRule\"\233\001\n\017ItemC"
    "heckResult\022\017\n\007item_id\030\001 \001(\r\0226\n\004type\030\002 \001("
    "\0162(.msg.business.ItemCheckResult.ResultT"
    "ype\022\023\n\013result_data\030\003 \001(\014\"*\n\nResultType\022\016"
    "\n\nT_PROGRESS\020\000\022\014\n\010T_RESULT\020\001\"\303\001\n\020ItemCon"
    "trolState\022=\n\004type\030\001 \001(\0162/.msg.business.I"
    "temControlState.ControlStateType\022\026\n\016max_"
    "report_num\030\002 \001(\r\"X\n\020ControlStateType\022\r\n\t"
    "T_UNKNOWN\020\000\022\013\n\007T_START\020\001\022\n\n\006T_STOP\020\002\022\r\n\t"
    "T_SUSPEND\020\003\022\r\n\tT_RESTORE\020\004b\006proto3"
};
static ::absl::once_flag descriptor_table_msg_5fbusiness_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_msg_5fbusiness_2eproto = {
    false,
    false,
    754,
    descriptor_table_protodef_msg_5fbusiness_2eproto,
    "msg_business.proto",
    &descriptor_table_msg_5fbusiness_2eproto_once,
    nullptr,
    0,
    5,
    schemas,
    file_default_instances,
    TableStruct_msg_5fbusiness_2eproto::offsets,
    file_level_metadata_msg_5fbusiness_2eproto,
    file_level_enum_descriptors_msg_5fbusiness_2eproto,
    file_level_service_descriptors_msg_5fbusiness_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_msg_5fbusiness_2eproto_getter() {
  return &descriptor_table_msg_5fbusiness_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_msg_5fbusiness_2eproto(&descriptor_table_msg_5fbusiness_2eproto);
namespace msg {
namespace business {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemRule_ItemRuleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_5fbusiness_2eproto);
  return file_level_enum_descriptors_msg_5fbusiness_2eproto[0];
}
bool ItemRule_ItemRuleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ItemRule_ItemRuleType ItemRule::T_SETRULE;
constexpr ItemRule_ItemRuleType ItemRule::T_EXTEND;
constexpr ItemRule_ItemRuleType ItemRule::ItemRuleType_MIN;
constexpr ItemRule_ItemRuleType ItemRule::ItemRuleType_MAX;
constexpr int ItemRule::ItemRuleType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemRule_ValueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_5fbusiness_2eproto);
  return file_level_enum_descriptors_msg_5fbusiness_2eproto[1];
}
bool ItemRule_ValueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ItemRule_ValueType ItemRule::T_STRING;
constexpr ItemRule_ValueType ItemRule::T_DECIMAL;
constexpr ItemRule_ValueType ItemRule::ValueType_MIN;
constexpr ItemRule_ValueType ItemRule::ValueType_MAX;
constexpr int ItemRule::ValueType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemCheckResult_ResultType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_5fbusiness_2eproto);
  return file_level_enum_descriptors_msg_5fbusiness_2eproto[2];
}
bool ItemCheckResult_ResultType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ItemCheckResult_ResultType ItemCheckResult::T_PROGRESS;
constexpr ItemCheckResult_ResultType ItemCheckResult::T_RESULT;
constexpr ItemCheckResult_ResultType ItemCheckResult::ResultType_MIN;
constexpr ItemCheckResult_ResultType ItemCheckResult::ResultType_MAX;
constexpr int ItemCheckResult::ResultType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemControlState_ControlStateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_5fbusiness_2eproto);
  return file_level_enum_descriptors_msg_5fbusiness_2eproto[3];
}
bool ItemControlState_ControlStateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ItemControlState_ControlStateType ItemControlState::T_UNKNOWN;
constexpr ItemControlState_ControlStateType ItemControlState::T_START;
constexpr ItemControlState_ControlStateType ItemControlState::T_STOP;
constexpr ItemControlState_ControlStateType ItemControlState::T_SUSPEND;
constexpr ItemControlState_ControlStateType ItemControlState::T_RESTORE;
constexpr ItemControlState_ControlStateType ItemControlState::ControlStateType_MIN;
constexpr ItemControlState_ControlStateType ItemControlState::ControlStateType_MAX;
constexpr int ItemControlState::ControlStateType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class GetItemRule::_Internal {
 public:
};

GetItemRule::GetItemRule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.business.GetItemRule)
}
GetItemRule::GetItemRule(const GetItemRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.business.GetItemRule)
}

inline void GetItemRule::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetItemRule::~GetItemRule() {
  // @@protoc_insertion_point(destructor:msg.business.GetItemRule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetItemRule::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetItemRule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetItemRule::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.business.GetItemRule)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetItemRule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetItemRule::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.business.GetItemRule)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.business.GetItemRule)
  return target;
}

::size_t GetItemRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.business.GetItemRule)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_item_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetItemRule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetItemRule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetItemRule::GetClassData() const { return &_class_data_; }


void GetItemRule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetItemRule*>(&to_msg);
  auto& from = static_cast<const GetItemRule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.business.GetItemRule)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_item_id() != 0) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetItemRule::CopyFrom(const GetItemRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.business.GetItemRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemRule::IsInitialized() const {
  return true;
}

void GetItemRule::InternalSwap(GetItemRule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.item_id_, other->_impl_.item_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetItemRule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fbusiness_2eproto_getter, &descriptor_table_msg_5fbusiness_2eproto_once,
      file_level_metadata_msg_5fbusiness_2eproto[0]);
}
// ===================================================================

class ItemRule::_Internal {
 public:
};

ItemRule::ItemRule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.business.ItemRule)
}
ItemRule::ItemRule(const ItemRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ItemRule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rule_data_) {}

    , decltype(_impl_.rule_id_) {}

    , decltype(_impl_.item_rule_type_) {}

    , decltype(_impl_.value_type_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rule_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rule_data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rule_data().empty()) {
    _this->_impl_.rule_data_.Set(from._internal_rule_data(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.rule_id_, &from._impl_.rule_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.value_type_) -
    reinterpret_cast<char*>(&_impl_.rule_id_)) + sizeof(_impl_.value_type_));
  // @@protoc_insertion_point(copy_constructor:msg.business.ItemRule)
}

inline void ItemRule::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.rule_data_) {}

    , decltype(_impl_.rule_id_) { 0u }

    , decltype(_impl_.item_rule_type_) { 0 }

    , decltype(_impl_.value_type_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.rule_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rule_data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ItemRule::~ItemRule() {
  // @@protoc_insertion_point(destructor:msg.business.ItemRule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ItemRule::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rule_data_.Destroy();
}

void ItemRule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ItemRule::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.business.ItemRule)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rule_data_.ClearToEmpty();
  ::memset(&_impl_.rule_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.value_type_) -
      reinterpret_cast<char*>(&_impl_.rule_id_)) + sizeof(_impl_.value_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemRule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 rule_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.rule_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes rule_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_rule_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .msg.business.ItemRule.ItemRuleType item_rule_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_item_rule_type(static_cast<::msg::business::ItemRule_ItemRuleType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .msg.business.ItemRule.ValueType value_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_value_type(static_cast<::msg::business::ItemRule_ValueType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ItemRule::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.business.ItemRule)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rule_id = 1;
  if (this->_internal_rule_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_rule_id(), target);
  }

  // bytes rule_data = 2;
  if (!this->_internal_rule_data().empty()) {
    const std::string& _s = this->_internal_rule_data();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // .msg.business.ItemRule.ItemRuleType item_rule_type = 3;
  if (this->_internal_item_rule_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_item_rule_type(), target);
  }

  // .msg.business.ItemRule.ValueType value_type = 4;
  if (this->_internal_value_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_value_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.business.ItemRule)
  return target;
}

::size_t ItemRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.business.ItemRule)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes rule_data = 2;
  if (!this->_internal_rule_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_rule_data());
  }

  // uint32 rule_id = 1;
  if (this->_internal_rule_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_rule_id());
  }

  // .msg.business.ItemRule.ItemRuleType item_rule_type = 3;
  if (this->_internal_item_rule_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_item_rule_type());
  }

  // .msg.business.ItemRule.ValueType value_type = 4;
  if (this->_internal_value_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_value_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemRule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ItemRule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemRule::GetClassData() const { return &_class_data_; }


void ItemRule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ItemRule*>(&to_msg);
  auto& from = static_cast<const ItemRule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.business.ItemRule)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rule_data().empty()) {
    _this->_internal_set_rule_data(from._internal_rule_data());
  }
  if (from._internal_rule_id() != 0) {
    _this->_internal_set_rule_id(from._internal_rule_id());
  }
  if (from._internal_item_rule_type() != 0) {
    _this->_internal_set_item_rule_type(from._internal_item_rule_type());
  }
  if (from._internal_value_type() != 0) {
    _this->_internal_set_value_type(from._internal_value_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemRule::CopyFrom(const ItemRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.business.ItemRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemRule::IsInitialized() const {
  return true;
}

void ItemRule::InternalSwap(ItemRule* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rule_data_, lhs_arena,
                                       &other->_impl_.rule_data_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ItemRule, _impl_.value_type_)
      + sizeof(ItemRule::_impl_.value_type_)
      - PROTOBUF_FIELD_OFFSET(ItemRule, _impl_.rule_id_)>(
          reinterpret_cast<char*>(&_impl_.rule_id_),
          reinterpret_cast<char*>(&other->_impl_.rule_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemRule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fbusiness_2eproto_getter, &descriptor_table_msg_5fbusiness_2eproto_once,
      file_level_metadata_msg_5fbusiness_2eproto[1]);
}
// ===================================================================

class ItemRules::_Internal {
 public:
};

ItemRules::ItemRules(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.business.ItemRules)
}
ItemRules::ItemRules(const ItemRules& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ItemRules* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_rule_){from._impl_.item_rule_}
    , decltype(_impl_.item_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.item_id_ = from._impl_.item_id_;
  // @@protoc_insertion_point(copy_constructor:msg.business.ItemRules)
}

inline void ItemRules::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.item_rule_){arena}
    , decltype(_impl_.item_id_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ItemRules::~ItemRules() {
  // @@protoc_insertion_point(destructor:msg.business.ItemRules)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ItemRules::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_item_rule()->~RepeatedPtrField();
}

void ItemRules::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ItemRules::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.business.ItemRules)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_item_rule()->Clear();
  _impl_.item_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemRules::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .msg.business.ItemRule item_rule = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_mutable_item_rule()->Add(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ItemRules::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.business.ItemRules)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_item_id(), target);
  }

  // repeated .msg.business.ItemRule item_rule = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_item_rule_size()); i < n; i++) {
    const auto& repfield = this->_internal_item_rule().Get(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.business.ItemRules)
  return target;
}

::size_t ItemRules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.business.ItemRules)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.business.ItemRule item_rule = 2;
  total_size += 1UL * this->_internal_item_rule_size();
  for (const auto& msg : this->_internal_item_rule()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_item_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemRules::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ItemRules::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemRules::GetClassData() const { return &_class_data_; }


void ItemRules::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ItemRules*>(&to_msg);
  auto& from = static_cast<const ItemRules&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.business.ItemRules)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_item_rule()->MergeFrom(from._internal_item_rule());
  if (from._internal_item_id() != 0) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemRules::CopyFrom(const ItemRules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.business.ItemRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemRules::IsInitialized() const {
  return true;
}

void ItemRules::InternalSwap(ItemRules* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_item_rule()->InternalSwap(other->_internal_mutable_item_rule());

  swap(_impl_.item_id_, other->_impl_.item_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemRules::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fbusiness_2eproto_getter, &descriptor_table_msg_5fbusiness_2eproto_once,
      file_level_metadata_msg_5fbusiness_2eproto[2]);
}
// ===================================================================

class ItemCheckResult::_Internal {
 public:
};

ItemCheckResult::ItemCheckResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.business.ItemCheckResult)
}
ItemCheckResult::ItemCheckResult(const ItemCheckResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ItemCheckResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_data_) {}

    , decltype(_impl_.item_id_) {}

    , decltype(_impl_.type_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.result_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.result_data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result_data().empty()) {
    _this->_impl_.result_data_.Set(from._internal_result_data(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:msg.business.ItemCheckResult)
}

inline void ItemCheckResult::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.result_data_) {}

    , decltype(_impl_.item_id_) { 0u }

    , decltype(_impl_.type_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.result_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.result_data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ItemCheckResult::~ItemCheckResult() {
  // @@protoc_insertion_point(destructor:msg.business.ItemCheckResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ItemCheckResult::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.result_data_.Destroy();
}

void ItemCheckResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ItemCheckResult::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.business.ItemCheckResult)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_data_.ClearToEmpty();
  ::memset(&_impl_.item_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemCheckResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .msg.business.ItemCheckResult.ResultType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::msg::business::ItemCheckResult_ResultType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes result_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_result_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ItemCheckResult::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.business.ItemCheckResult)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_item_id(), target);
  }

  // .msg.business.ItemCheckResult.ResultType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_type(), target);
  }

  // bytes result_data = 3;
  if (!this->_internal_result_data().empty()) {
    const std::string& _s = this->_internal_result_data();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.business.ItemCheckResult)
  return target;
}

::size_t ItemCheckResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.business.ItemCheckResult)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes result_data = 3;
  if (!this->_internal_result_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_result_data());
  }

  // uint32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_item_id());
  }

  // .msg.business.ItemCheckResult.ResultType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemCheckResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ItemCheckResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemCheckResult::GetClassData() const { return &_class_data_; }


void ItemCheckResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ItemCheckResult*>(&to_msg);
  auto& from = static_cast<const ItemCheckResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.business.ItemCheckResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result_data().empty()) {
    _this->_internal_set_result_data(from._internal_result_data());
  }
  if (from._internal_item_id() != 0) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemCheckResult::CopyFrom(const ItemCheckResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.business.ItemCheckResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemCheckResult::IsInitialized() const {
  return true;
}

void ItemCheckResult::InternalSwap(ItemCheckResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.result_data_, lhs_arena,
                                       &other->_impl_.result_data_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ItemCheckResult, _impl_.type_)
      + sizeof(ItemCheckResult::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(ItemCheckResult, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemCheckResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fbusiness_2eproto_getter, &descriptor_table_msg_5fbusiness_2eproto_once,
      file_level_metadata_msg_5fbusiness_2eproto[3]);
}
// ===================================================================

class ItemControlState::_Internal {
 public:
};

ItemControlState::ItemControlState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.business.ItemControlState)
}
ItemControlState::ItemControlState(const ItemControlState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.business.ItemControlState)
}

inline void ItemControlState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.type_) { 0 }

    , decltype(_impl_.max_report_num_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ItemControlState::~ItemControlState() {
  // @@protoc_insertion_point(destructor:msg.business.ItemControlState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ItemControlState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ItemControlState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ItemControlState::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.business.ItemControlState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.max_report_num_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.max_report_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemControlState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.business.ItemControlState.ControlStateType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::msg::business::ItemControlState_ControlStateType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 max_report_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.max_report_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ItemControlState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.business.ItemControlState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.business.ItemControlState.ControlStateType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // uint32 max_report_num = 2;
  if (this->_internal_max_report_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_max_report_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.business.ItemControlState)
  return target;
}

::size_t ItemControlState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.business.ItemControlState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.business.ItemControlState.ControlStateType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 max_report_num = 2;
  if (this->_internal_max_report_num() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_max_report_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemControlState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ItemControlState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemControlState::GetClassData() const { return &_class_data_; }


void ItemControlState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ItemControlState*>(&to_msg);
  auto& from = static_cast<const ItemControlState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.business.ItemControlState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_max_report_num() != 0) {
    _this->_internal_set_max_report_num(from._internal_max_report_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemControlState::CopyFrom(const ItemControlState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.business.ItemControlState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemControlState::IsInitialized() const {
  return true;
}

void ItemControlState::InternalSwap(ItemControlState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ItemControlState, _impl_.max_report_num_)
      + sizeof(ItemControlState::_impl_.max_report_num_)
      - PROTOBUF_FIELD_OFFSET(ItemControlState, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemControlState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fbusiness_2eproto_getter, &descriptor_table_msg_5fbusiness_2eproto_once,
      file_level_metadata_msg_5fbusiness_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace business
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::msg::business::GetItemRule*
Arena::CreateMaybeMessage< ::msg::business::GetItemRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::business::GetItemRule >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::business::ItemRule*
Arena::CreateMaybeMessage< ::msg::business::ItemRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::business::ItemRule >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::business::ItemRules*
Arena::CreateMaybeMessage< ::msg::business::ItemRules >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::business::ItemRules >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::business::ItemCheckResult*
Arena::CreateMaybeMessage< ::msg::business::ItemCheckResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::business::ItemCheckResult >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::business::ItemControlState*
Arena::CreateMaybeMessage< ::msg::business::ItemControlState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::business::ItemControlState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
